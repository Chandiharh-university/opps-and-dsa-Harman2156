#include <iostream>
#include <vector>
#include <queue>

using namespace std;

// Function to perform BFS on a graph
void bfs(const vector<vector<int>>& graph, int startVertex) {
    int vertices = graph.size();
    vector<bool> visited(vertices, false);
    queue<int> q;

    visited[startVertex] = true;
    q.push(startVertex);

    cout << "BFS Traversal starting from vertex " << startVertex << ": ";

    while (!q.empty()) {
        int currentVertex = q.front();
        q.pop();

        cout << currentVertex << " ";

        for (int neighbor : graph[currentVertex]) {
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                q.push(neighbor);
            }
        }
    }

    cout << endl;
}

int main() {
    // Example graph represented as an adjacency list
    vector<vector<int>> graph = {
        {1, 2},       // Neighbors of vertex 0
        {0, 3, 4},    // Neighbors of vertex 1
        {0, 4},       // Neighbors of vertex 2
        {1, 5},       // Neighbors of vertex 3
        {1, 2, 5},    // Neighbors of vertex 4
        {3, 4}        // Neighbors of vertex 5
    };

    int startVertex = 0;
    bfs(graph, startVertex);

    return 0;
}
