#include <iostream>
#include <vector>
#include <string>
#include <sstream>

// Definition for a binary tree node
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

// Helper function to perform DFS and generate paths
void dfs(TreeNode* node, std::string path, std::vector<std::string>& paths) {
    if (!node) return;

    // Append the current node's value to the path
    if (!path.empty()) {
        path += "->";
    }
    path += std::to_string(node->val);

    // If it's a leaf node, add the path to the result
    if (!node->left && !node->right) {
        paths.push_back(path);
        return;
    }

    // Recurse for left and right children
    if (node->left) dfs(node->left, path, paths);
    if (node->right) dfs(node->right, path, paths);
}

// Main function to find all root-to-leaf paths
std::vector<std::string> binaryTreePaths(TreeNode* root) {
    std::vector<std::string> paths;
    if (root) {
        dfs(root, "", paths);
    }
    return paths;
}

// Utility function to print a vector of strings
void printPaths(const std::vector<std::string>& paths) {
    for (const std::string& path : paths) {
        std::cout << path << std::endl;
    }
}

// Example usage
int main() {
    // Create example binary tree [1,2,3,null,5]
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->right = new TreeNode(5);

    // Get all root-to-leaf paths
    std::vector<std::string> result = binaryTreePaths(root);

    // Print the result
    std::cout << "Root-to-leaf paths:" << std::endl;
    printPaths(result);

    // Clean up memory
    delete root->left->right;
    delete root->left;
    delete root->right;
    delete root;

    return 0;
}
