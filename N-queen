#include <iostream>
#include <vector>

class NQueens {
public:
    int totalNQueens(int n) {
        int count = 0;
        std::vector<int> positions(n, -1); // positions[i] stores the column index for the queen in row i
        solve(0, n, positions, count);
        return count;
    }

private:
    // Helper function to check if a queen placement is valid
    bool isValid(const std::vector<int>& positions, int row, int col) {
        for (int i = 0; i < row; ++i) {
            // Check for same column or diagonal conflict
            if (positions[i] == col || 
                positions[i] - i == col - row || 
                positions[i] + i == col + row) {
                return false;
            }
        }
        return true;
    }

    // Backtracking function to place queens
    void solve(int row, int n, std::vector<int>& positions, int& count) {
        if (row == n) {
            // All queens are placed successfully
            ++count;
            return;
        }

        for (int col = 0; col < n; ++col) {
            if (isValid(positions, row, col)) {
                positions[row] = col; // Place the queen
                solve(row + 1, n, positions, count); // Recur for the next row
                positions[row] = -1; // Backtrack
            }
        }
    }
};

int main() {
    int n;
    std::cout << "Enter the value of n: ";
    std::cin >> n;

    NQueens solver;
    int solutions = solver.totalNQueens(n);

    std::cout << "Number of distinct solutions for " << n << "-Queens: " << solutions << std::endl;

    return 0;
}
